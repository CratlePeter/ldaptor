#!/usr/bin/python

from __future__ import print_function
import sys
from twisted.internet import protocol, defer, reactor
from ldaptor.protocols.ldap import distinguishedname, ldapconnector, ldapsyntax, ldapclient
from ldaptor.protocols import pureber, pureldap
from ldaptor import usage, ldapfilter, config, dns

def _printIPAddressVOne(name, ip):
    print('A'+name+'.%|86400|'+ip)

def _printPTRVOne(name, ip):
    octets = ip.split('.')
    octets.reverse()
    octets.append('in-addr.arpa.')
    print('P'+('.'.join(octets))+'|86400|'+name+'.%')

class _HostIPAddress:
    def __init__(self, hostObject, ipAddress):
        self.host = hostObject
        self.ipAddress = ipAddress

    def createConfEntry(self):
        print('#Host:'+self.host.dn)
        if self.host.version == 1:
            _printIPAddressVOne(self.host.name, self.ipAddress)
            _printPTRVOne(self.host.name, self.ipAddress)
        elif self.host.version == 2:
            _printIPAddressVOne(self.host.name, self.ipAddress)
            _printPTRVOne(self.host.name, self.ipAddress)

    def __repr__(self):
        return (self.__class__.__name__
                +'('
                +'host=%r, ' % self.host.name
                +'ipAddress=%s' % repr(self.ipAddress)
                +')')

class _Host:
    def __init__(self, maraDnsConfVersion, dn, name, ipAddresses):
        self.version = maraDnsConfVersion
        self.dn = dn
        self.name = name
        self.ipAddresses = [_HostIPAddress(self, ip) for ip in ipAddresses]

    def __repr__(self):
        return (self.__class__.__name__
                +'('
                +'version=%s, ' % repr(self.version)
                +'dn=%s, ' % repr(self.dn)
                +'name=%s, ' % repr(self.name)
                +'ipAddresses=%s' % repr(self.ipAddresses)
                +')')

exitStatus = 0

def error(fail):
    print('fail:', str(fail), file=sys.stderr) #.getErrorMessage()
    global exitStatus
    exitStatus = 1

def only(serverResponse, attrName):
    assert len(serverResponse[attrName]) == 1, \
           "object %s attribute %r has multiple values: %s" \
           % (serverResponse.dn, attrName, serverResponse[attrName])
    for val in serverResponse[attrName]:
        return val

def getHosts(serverResponse, maraDnsVersion, filterText):
    filt = pureldap.LDAPFilter_equalityMatch(
        attributeDesc=pureldap.LDAPAttributeDescription('objectClass'),
        assertionValue=pureber.BEROctetString('maradnsRecord'))
    if filterText:
        filt = pureldap.LDAPFilter_and(value=(filterText, filt))
    def _cbGotHost(serverResponse):
        host = _Host(maraDnsVersion,
                     str(serverResponse.dn.getText()),
                     str(only(serverResponse, 'idnsName')),
                     list(str(i) for i in serverResponse['FQDNRecord']))
        for hostIP in host.ipAddresses:
            hostIP.createConfEntry()

    d = serverResponse.search(filterObject=filt,
                              attributes=[
                                  'idnsName', 'FQDNRecord',
                                  'ARecord', 'cNAMERecord',
                                  'dNSTTL', 'mXRecord',
                                  'NSRecord'],
                              callback=_cbGotHost)
    return d

def cbConnected(client, cfg, maraDnsVersion, filterText):
    serverResponse = ldapsyntax.LDAPEntryWithClient(client, cfg.getBaseDN())
    d = getHosts(serverResponse, maraDnsVersion, filterText)
    def unbind(r, serverResponse):
        serverResponse.client.unbind()
        return r
    d.addCallback(unbind, serverResponse)
    return d

def main(cfg, maraDnsVersion, filterText):
    from twisted.python import log
    log.startLogging(sys.stderr, setStdout=0)

    try:
        baseDN = cfg.getBaseDN()
    except config.MissingBaseDNError as e:
        print("%s: %s." % (sys.argv[0], e), file=sys.stderr)
        sys.exit(1)

    if filterText is not None:
        filt = ldapfilter.parseFilter(filterText)
    else:
        filt = None

    c = ldapconnector.LDAPClientCreator(reactor, ldapclient.LDAPClient)
    d = c.connectAnonymously(
        baseDN,
        overrides=cfg.getServiceLocationOverrides())
    d.addCallback(cbConnected, cfg, maraDnsVersion, filt)
    d.addErrback(error)
    d.addBoth(lambda x: reactor.stop())

    reactor.run()
    sys.exit(exitStatus)

class MyOptions(usage.Options, usage.Options_service_location, usage.Options_base_optional):
    """LDAPtor maradns v1 and v2 zone file exporter"""
    def parseArgs(self, customFilter=None):
        self.opts['customFilter'] = customFilter

if __name__ == "__main__":
    try:
        opts = MyOptions()
        opts.parseOptions()
    except usage.UsageError as usageError:
        sys.stderr.write('%s: %s\n' % (sys.argv[0], usageError))
        sys.exit(1)

    cfg = config.LDAPConfig(baseDN=opts['base'],
                            serviceLocationOverrides=opts['service-location'])
    maraDnsVersion = config.maraDnsVersion()
    main(cfg,
         maraDnsVersion,
         opts['customFilter'])
